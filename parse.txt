Parsed and Consolidated Log File

To create a parsed and consolidated log file, you can use a combination of Unix tools like cat, grep, sed, sort, uniq, and awk. Here's a step-by-step guide:

Use awk and sed to normalize the log entries to the desired format. For this example, we will sort by date and time:

# Process nginx access log
	awk -F'[][]' '{print "[" $2 "]", "--- /var/log/gitlab/nginx/access.log ---", "\"" $0 "\""}' /var/log/gitlab/nginx/access.log  | sed "s/ +0000//g" > /tmp/parsed_consolidated.log

# Process rsyslog_cron.log
	awk '{ original_line = $0; gsub(/ /, "/", $1); printf "[%s/%s/2023:%s] --- /var/log/websrv-02/rsyslog_cron.log --- \"%s\"\n", $2, $1, $3, original_line }' /var/log/websrv-02/rsyslog_cron.log >> /tmp/parsed_consolidated.log

# Process rsyslog_sshd.log
	awk '{ original_line = $0; gsub(/ /, "/", $1); printf "[%s/%s/2023:%s] --- /var/log/websrv-02/rsyslog_sshd.log --- \"%s\"\n", $2, $1, $3, original_line }' /var/log/websrv-02/rsyslog_sshd.log >> /tmp/parsed_consolidated.log

# Process gitlab-rails/api_json.log
	awk -F'"' '{timestamp = $4; converted = strftime("[%d/%b/%Y:%H:%M:%S]", mktime(substr(timestamp, 1, 4) " " substr(timestamp, 6, 2) " " substr(timestamp, 9, 2) " " substr(timestamp, 12, 2) " " substr(timestamp, 15, 2) " " substr(timestamp, 18, 2) " 0 0")); print converted, "--- /var/log/gitlab/gitlab-rails/api_json.log ---", "\""$0"\""}' /var/log/gitlab/gitlab-rails/api_json.log >> /tmp/parsed_consolidated.log




Optional 2: Use grep to filter specific entries:

	grep "34.253.159.159" /tmp/parsed_consolidated.log > /tmp/filtered_consolidated.log

Use sort to sort all the log entries by date and time:
	sort /tmp/parsed_consolidated.log > /tmp/sort_parsed_consolidated.log

Use uniq to remove duplicate entries:
	uniq /tmp/sort_parsed_consolidated.log > /tmp/uniq_sort_parsed_consolidated.log

You can now access the parsed and consolidated log file through the Log Viewer tool using the following URL:
	http://10.10.84.28:8111/log?path=%2Ftmp%2Funiq_sort_parsed_consolidated.log




dHJ5aGFja21l
go to cyberchef >> select - > magic option >> show output datails


Regex with cyberchef
-------------------
Given pattern : \b([0-9]{1,3}\.){3}[0-9]{1,3}\b
Another custom pattern : (POST|GET) /.*=


cyberchef >> select Regular expression 
	   	>> use pattern 
		>> upload access.log
		>> get output only ip

[**** Build in Regex you can use it]
